
apiVersion: {{ template "e6data.deployment.apiVersion" . }}
kind: Deployment
metadata:
{{- if .Values.server.deploymentAnnotations }}
  annotations:
    {{ toYaml .Values.server.deploymentAnnotations | nindent 4 }}
{{- end }}
  labels:
    {{- include "e6data.server.labels" . | nindent 4 }}
  name: {{ template "e6data.server.fullname" . }}
spec:
  selector:
    matchLabels:
      {{- include "e6data.server.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.server.replicaCount }}
  {{- if .Values.server.strategy }}
  strategy:
{{ toYaml .Values.server.strategy | trim | indent 4 }}
    {{ if eq .Values.server.strategy.type "Recreate" }}rollingUpdate: null{{ end }}
{{- end }}
  template:
    metadata:
    {{- if .Values.server.podAnnotations }}
      annotations:
        {{ toYaml .Values.server.podAnnotations | nindent 8 }}
    {{- end }}
      labels:
        {{- include "e6data.server.labels" . | nindent 8 }}
        {{- if .Values.server.podLabels}}
        {{ toYaml .Values.server.podLabels | nindent 8 }}
        {{- end}}
    spec:
{{- if .Values.server.priorityClassName }}
      priorityClassName: "{{ .Values.server.priorityClassName }}"
{{- end }}
      serviceAccountName: e6data-operator
      containers:
        - name: {{ template "e6data.name" . }}-{{ .Values.server.name }}
          {{- if .Values.server.image.digest }}
          image: "{{ .Values.server.image.repository }}@{{ .Values.server.image.digest }}"
          {{- else }}
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag | default .Chart.AppVersion}}"
          {{- end }}
          imagePullPolicy: "{{ .Values.server.image.pullPolicy }}"
         
          env:
            - name: OPERATOR_BUCKET_NAME
              value: {{ .Values.server.bucketName }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace  

          ports:
            - containerPort: {{ .Values.server.service.containerPort }}
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: {{ .Values.server.readinessProbeInitialDelay }}
            periodSeconds: {{ .Values.server.readinessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.server.readinessProbeTimeout }}
            failureThreshold: {{ .Values.server.readinessProbeFailureThreshold }}
            successThreshold: {{ .Values.server.readinessProbeSuccessThreshold }}
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: {{ .Values.server.livenessProbeInitialDelay }}
            periodSeconds: {{ .Values.server.livenessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.server.livenessProbeTimeout }}
            failureThreshold: {{ .Values.server.livenessProbeFailureThreshold }}
            successThreshold: {{ .Values.server.livenessProbeSuccessThreshold }}
          resources:
{{ toYaml .Values.server.resources | indent 12 }}
          {{- with .Values.server.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      dnsPolicy: {{ .Values.server.dnsPolicy }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml .Values.imagePullSecrets | indent 8 }}
    {{- end }}
    {{- if .Values.server.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.server.nodeSelector | indent 8 }}
    {{- end }}
    {{- with .Values.server.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.server.tolerations }}
      tolerations:
{{ toYaml .Values.server.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.server.affinity }}
      affinity:
{{ toYaml .Values.server.affinity | indent 8 }}
    {{- end }}
    {{- with .Values.server.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
    {{- end }}